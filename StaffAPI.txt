Backend Midterm – Variant 2 – StaffPerson Search API with Pagination

Task:
Write an API to search staff persons using first and last name with LIKE.
Return: first name, last name, address, postal code.
Add pagination support.

Steps:

1. Entity (StaffPerson.java)
Ensure you have a StaffPerson entity in ge.ibsu.demo.entities:

@Entity
public class StaffPerson {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private String address;
    private String postalCode;

    // getters and setters
}

2. DTO (StaffPersonDTO.java)
----------------------------
package ge.ibsu.demo.dto;

public class StaffPersonDTO {
    private String firstName;
    private String lastName;
    private String address;
    private String postalCode;

    public StaffPersonDTO(String firstName, String lastName, String address, String postalCode) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
        this.postalCode = postalCode;
    }

    // getters
}

3. Repository (StaffPersonRepository.java)
------------------------------------------
package ge.ibsu.demo.repositories;

import ge.ibsu.demo.dto.StaffPersonDTO;
import ge.ibsu.demo.entities.StaffPerson;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.jpa.repository.JpaRepository;

public interface StaffPersonRepository extends JpaRepository<StaffPerson, Long> {

    @Query("SELECT new ge.ibsu.demo.dto.StaffPersonDTO(s.firstName, s.lastName, s.address, s.postalCode) " +
           "FROM StaffPerson s WHERE " +
           "LOWER(s.firstName) LIKE LOWER(CONCAT('%', :firstName, '%')) AND " +
           "LOWER(s.lastName) LIKE LOWER(CONCAT('%', :lastName, '%'))")
    Page<StaffPersonDTO> searchByName(@Param("firstName") String firstName,
                                      @Param("lastName") String lastName,
                                      Pageable pageable);
}

4. Service (StaffPersonService.java)
------------------------------------
package ge.ibsu.demo.services;

import ge.ibsu.demo.dto.StaffPersonDTO;
import ge.ibsu.demo.repositories.StaffPersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

@Service
public class StaffPersonService {
    @Autowired
    private StaffPersonRepository repository;

    public Page<StaffPersonDTO> search(String firstName, String lastName, Pageable pageable) {
        return repository.searchByName(firstName, lastName, pageable);
    }
}

5. Controller (StaffPersonController.java)
------------------------------------------
package ge.ibsu.demo.controllers;

import ge.ibsu.demo.dto.StaffPersonDTO;
import ge.ibsu.demo.services.StaffPersonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/staff")
public class StaffPersonController {

    @Autowired
    private StaffPersonService service;

    @GetMapping("/search")
    public Page<StaffPersonDTO> search(
        @RequestParam(defaultValue = "") String firstName,
        @RequestParam(defaultValue = "") String lastName,
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "10") int size
    ) {
        return service.search(firstName, lastName, PageRequest.of(page, size));
    }
}

6. Test Endpoint:
-----------------
GET /api/staff/search?firstName=ann&lastName=ka&page=0&size=5
Returns: Staff info with pagination